/*
 * MIT License
 *
 * Copyright (c) 2018 Alexandre Piveteau
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.github.alexandrepiveteau.parsers

import com.github.alexandrepiveteau.functional.monads.*

class Parser<I, O, E>(private val f: (I) -> Either<E, Pair<O, I>>) {

    fun parse(i: I): Either<E, Pair<O, I>> = f(i)

    companion object Factory {

        /**
         * Returns a [Parser] that will chomp the first [Char] of a given [String]. If the [Char] does not correspond,
         * an error message will be generated instead.
         *
         * @param char The value of the character that will be consumed by this [Parser].
         * @param f The function that generates an error message, with as parameter the [Char] that was not found.
         *
         * @param E The type of errors generated by the parser.
         *
         * This function will be removed in the next major library update.
         */
        @Deprecated(
                message = "This function has been removed from the core Parser types, as it is type-specific.",
                level = DeprecationLevel.WARNING)
        fun <E> char(char: Char, f: (Char) -> E): Parser<String, Char, E> =
                Parser { text ->
                    return@Parser if (text.firstOrNull() == char)
                        eitherValue<E, Pair<Char, String>>(char to text.drop(1))
                    else
                        eitherError(f(char))
                }

        fun <I, O, E> fail(f: () -> E): Parser<I, O, E> = Parser { eitherError(f()) }
        fun <I, O, E> lazy(f: () -> Parser<I, O, E>): Parser<I, O, E> = Parser { input -> f().parse(input) }
        fun <I, E> succeed(): Parser<I, Unit, E> = Parser { eitherValue(Unit to it) }
    }
}